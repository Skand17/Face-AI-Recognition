{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","status","video","document","querySelector","Promise","all","faceapi","tinyFaceDetector","loadFromUri","faceLandmark68Net","faceRecognitionNet","faceExpressionNet","then","navigator","mediaDevices","getUserMedia","audio","width","height","mediaStream","srcObject","catch","err","console","log","name","message","addEventListener","canvas","body","append","displaySize","setInterval","a","withFaceLandmarks","withFaceExpressions","detections","setState","resizeDetection","getContext","clearRect","drawDetections","drawFaceExpressions","drawFaceLandmarks","autoPlay","muted","PureComponent","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","serviceWorker","ready","registration","unregister","error"],"mappings":"wUAyEeA,E,kDAnEb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAS,CACVC,OAAS,IAHI,E,gEASC,IAAD,OAEbC,EAAQC,SAASC,cAAc,SAEnCC,QAAQC,IAAI,CACNC,IAAaC,iBAAiBC,YAjBtB,YAkBRF,IAAaG,kBAAkBD,YAlBvB,YAmBRF,IAAaI,mBAAmBF,YAnBxB,YAoBRF,IAAaK,kBAAkBH,YApBvB,cAsBbI,MAEH,WAEEC,UAAUC,aAAaC,aADL,CAAEC,OAAO,EAAMf,MAAO,CAAEgB,MAAO,IAAKC,OAAQ,OACbN,MAAK,SAASO,GAC3DlB,EAAMmB,UAAYD,KACjBE,OAAM,SAASC,GAChBC,QAAQC,IAAIF,EAAIG,KAAO,KAAOH,EAAII,eAIxCzB,EAAM0B,iBAAiB,QAAQ,WACzB,IAAMC,EAAStB,IAA8BL,GAC7CC,SAAS2B,KAAKC,OAAOF,GACrB,IAAMG,EAAc,CAChBd,MAAQhB,EAAMgB,MAAOC,OAAQjB,EAAMiB,QAEvCc,YAAW,sBAAE,8BAAAC,EAAA,sEACmB3B,IAAuBL,EAAO,IAAIK,KAAmC4B,oBAAoBC,sBAD5G,OACDC,EADC,OAEP,EAAKC,SAAS,CACZrC,OAAQoC,IAEJE,EAAmBhC,IAAsB8B,EAAYL,GAC3D,EAAKM,SAAS,CACZrC,OAASsC,IAEXV,EAAOW,WAAW,MAAMC,UAAU,EAAE,EAAEZ,EAAOX,MAAMW,EAAOV,QACzDZ,IAAamC,eAAeb,EAAOU,GACnChC,IAAaoC,oBAAoBd,EAAOU,GACxChC,IAAaqC,kBAAkBf,EAAOU,GAZhC,4CAcT,U,+BAOR,OACE,6BACI,2BAAQrB,MAAM,MAAMC,OAAO,MAAM0B,UAAQ,EAACC,OAAK,IAC/C,mC,GA7DQC,iBCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFpD,SAASqD,eAAe,SDyHpB,kBAAmB1C,WACrBA,UAAU2C,cAAcC,MACrB7C,MAAK,SAAA8C,GACJA,EAAaC,gBAEdtC,OAAM,SAAAuC,GACLrC,QAAQqC,MAAMA,EAAMlC,c","file":"static/js/main.41b69faf.chunk.js","sourcesContent":["import React, { PureComponent } from 'react'\nimport * as faceapi from 'face-api.js';\n\nconst MODEL_URL = './models'\n\nclass App extends PureComponent {\n  constructor(props) {\n    super(props)\n    this.state  = {\n        status : []\n    }\n  }\n\n\n\n  componentDidMount(){     \n\n    var video = document.querySelector(\"video\");\n        // Promose\n    Promise.all([\n          faceapi.nets.tinyFaceDetector.loadFromUri(MODEL_URL),\n          faceapi.nets.faceLandmark68Net.loadFromUri(MODEL_URL),\n          faceapi.nets.faceRecognitionNet.loadFromUri(MODEL_URL),\n          faceapi.nets.faceExpressionNet.loadFromUri(MODEL_URL)\n    \n  ]).then( (openWebcam))\n\n  function openWebcam(){\n    var constraints = { audio: true, video: { width: 720, height: 560 } };\n    navigator.mediaDevices.getUserMedia(constraints).then(function(mediaStream) {\n        video.srcObject = mediaStream;\n      }).catch(function(err) {\n        console.log(err.name + \": \" + err.message);\n      }); \n  }\n\n  video.addEventListener('play', () => {\n        const canvas = faceapi.createCanvasFromMedia(video)\n        document.body.append(canvas) \n        const displaySize = {\n            width : video.width, height: video.height\n        }\n        setInterval( async ()=> {\n              const detections =  await faceapi.detectAllFaces(video, new faceapi.TinyFaceDetectorOptions()).withFaceLandmarks().withFaceExpressions()\n              this.setState({\n                status :detections\n              })\n              const resizeDetection =  faceapi.resizeResults(detections, displaySize)\n              this.setState({\n                status : resizeDetection\n              })\n              canvas.getContext('2d').clearRect(0,0,canvas.width,canvas.height)\n               faceapi.draw.drawDetections(canvas,resizeDetection)\n               faceapi.draw.drawFaceExpressions(canvas,resizeDetection)\n               faceapi.draw.drawFaceLandmarks(canvas,resizeDetection)\n\n          },900)\n        })\n  }\n      \n  \n\n  render() {\n    return (\n      <div>\n          <video  width=\"720\" height=\"420\" autoPlay muted></video>  \n          <div>\n          </div>\n      </div>\n    )\n  }\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}